import java_cup.runtime.*;

/*Este codigo foi reusado. Ele serve para nos mostrar aonde ocorreu um erro, ao ler um arquivo de entrada.*/
parser code {:
    
    public void report_error(String message, Object info) {
   
        StringBuffer m = new StringBuffer("Error");
   
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {
                /* Add to the end of the StringBuffer error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));   
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)                    
                    /* Add to the end of the StringBuffer error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }
   
	
        m.append(" : "+message);
        System.err.println(m);
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }
:};

/*Aqui estao listado todos os simbolos terminais da nossa gramatica*/
terminal AUTO, BREAK, CASE, CHAR, CONST, CONTINUE, DEFAULT, DO, DOUBLE, ELSE, ENUM, EXTERN, FLOAT, FOR, GOTO, IF, INT,
LONG, REGISTER, RETURN, SHORT, SIGNED, SIZEOF, STATIC, STRUCT, SWITCH, TYPEDEF, UNION, UNSIGNED, VOID, VOLATILE, WHILE,
ELLIPSIS, RIGHT_ASSIGN, LEFT_ASSIGN, ADD_ASSIGN, SUB_ASSIGN, MUL_ASSIGN, DIV_ASSIGN, MOD_ASSIGN, AND_ASSIGN, XOR_ASSIGN,
OR_ASSIGN, RIGHT_OP, LEFT_OP, INC_OP, DEC_OP, PTR_OP, AND_OP, OR_OP, LE_OP, GE_OP, EQ_OP, NE_OP, PONTOEVIRGULA, ABRECHAVES,
FECHACHAVES, VIRGULA, DOISPONTOS, IGUAL, ABREPARENTESES, FECHAPARENTESES, ABRECOCHETES, FECHACOCHETES, PONTO, ECOMERCIAL,
EXCLAMACAO, TIO, MENOS, MAIS, ASTERISCO, BARRA, PORCENTO, MENORQUE, MAIORQUE, CIRCUNFLEXO, PIPELINE, INTERROGACAO,  
NUMBER, STRING, /* DUVIDAAAAAAAAAAAAA */ CONSTANT, IDENTIFIER, STRING_LITERAL ; /* CONSTANT, IDENTIFIER, STRING_LITERAL estão errados, falta definir! */

/*Aqui estao todos os simbolos nao terminais da gramatica*/
non terminal primary_expression, expr, expr_tail, factor, factor_tail, term;

/*Aqui estao as regras de producao*/

/*Regras de C*/
primary_expression ::= IDENTIFIER | CONSTANT | STRING_LITERAL | ABREPARENTESES expr FECHAPARENTESES; 
/* primary_expression ::= IDENTIFIER | CONSTANT | STRING_LITERAL | ABREPARENTESES expression FECHAPARENTESES; seria o correto, coloquei expr só para testar" */

expr ::= factor expr_tail;
expr_tail ::= | MAIS factor expr_tail | MENOS factor expr_tail;
factor ::= term factor_tail;
factor_tail ::= | ASTERISCO term factor_tail | BARRA term factor_tail;
term ::= NUMBER | ABREPARENTESES expr FECHAPARENTESES;
    
    