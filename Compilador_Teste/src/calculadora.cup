import java_cup.runtime.*;

/*Este codigo foi reusado. Ele serve para nos mostrar aonde ocorreu um erro, ao ler um arquivo de entrada.*/
parser code {:
    
    public void report_error(String message, Object info) {
   
        StringBuffer m = new StringBuffer("Error");
   
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {
                /* Add to the end of the StringBuffer error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));   
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)                    
                    /* Add to the end of the StringBuffer error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }
   
	
        m.append(" : "+message);
        System.err.println(m);
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }
:};

/*Aqui estao listado todos os simbolos terminais da nossa gramatica*/
terminal LPAREN, RPAREN, MINUS, PLUS, DIV, TIMES, NUMBER, STRING;

/*Aqui estao todos os simbolos nao terminais da gramatica*/
non terminal expr, expr_tail, factor, factor_tail, term;

/*Aqui estao as regras de producao*/
expr ::= factor expr_tail;
expr_tail ::= | PLUS factor expr_tail | MINUS factor expr_tail;
factor ::= term factor_tail;
factor_tail ::= | TIMES term factor_tail | DIV term factor_tail;
term ::= NUMBER | LPAREN expr RPAREN;
    
    