/* The following code was generated by JFlex 1.4.3 on 8/4/13 6:01 PM */

package flex;

import java_cup.runtime.*;
import cup.sym;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 8/4/13 6:01 PM from the specification file
 * <tt>C:/Users/Matheus/git/CCompiler/CCompiler/src/flex/calculadora.flex</tt>
 */
public class LexicalAnalysisCalculator implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int incl = 4;
  public static final int comments = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\100\1\75\1\0\1\70\23\0\1\100\1\54\1\76\1\77"+
    "\1\0\1\50\1\51\1\73\1\62\1\63\1\46\1\45\1\60\1\5"+
    "\1\41\1\47\1\71\11\1\1\61\1\55\1\44\1\43\1\42\1\67"+
    "\1\0\4\3\1\4\1\7\5\2\1\11\10\2\1\13\2\2\1\72"+
    "\2\2\1\64\1\74\1\65\1\52\1\2\1\0\1\17\1\14\1\23"+
    "\1\30\1\16\1\6\1\33\1\25\1\27\1\2\1\20\1\10\1\31"+
    "\1\26\1\22\1\37\1\2\1\15\1\24\1\21\1\12\1\40\1\35"+
    "\1\32\1\36\1\34\1\56\1\53\1\57\1\66\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\17\3\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\1\1\2\2\0"+
    "\2\1\1\34\2\1\1\0\2\2\1\35\1\36\1\37"+
    "\23\3\1\40\2\3\1\41\3\3\1\0\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\2\0"+
    "\1\63\1\0\1\1\1\64\1\2\1\0\1\2\1\3"+
    "\1\65\25\3\1\66\6\3\1\67\1\70\1\71\1\2"+
    "\1\0\2\3\1\72\5\3\1\73\1\74\1\3\1\75"+
    "\1\3\1\76\2\3\1\77\10\3\1\100\2\3\1\101"+
    "\1\0\1\102\1\3\1\0\1\3\1\103\1\104\5\3"+
    "\1\105\2\3\1\106\5\3\1\107\1\3\3\0\1\3"+
    "\1\110\1\3\1\111\2\3\1\112\1\113\1\114\1\115"+
    "\1\116\1\3\1\117\1\3\1\0\2\3\1\120\1\3"+
    "\1\121\1\3\1\0\1\122\1\123\1\124\1\125";

  private static int [] zzUnpackAction() {
    int [] result = new int[228];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\101\0\202\0\303\0\u0104\0\u0145\0\u0186\0\u01c7"+
    "\0\u0208\0\u0249\0\u028a\0\u02cb\0\u030c\0\u034d\0\u038e\0\u03cf"+
    "\0\u0410\0\u0451\0\u0492\0\u04d3\0\u0514\0\u0555\0\u0596\0\u05d7"+
    "\0\u0618\0\u0659\0\u069a\0\u06db\0\u071c\0\u075d\0\u079e\0\u07df"+
    "\0\u0820\0\u0861\0\u0861\0\u0861\0\u0861\0\u08a2\0\u0861\0\u0861"+
    "\0\u0861\0\u0861\0\u0861\0\u0861\0\u0861\0\u08e3\0\u0924\0\u0965"+
    "\0\u09a6\0\u09e7\0\u0861\0\u0a28\0\u0a69\0\u0aaa\0\u0aeb\0\u0b2c"+
    "\0\u0861\0\u0861\0\u0861\0\u0b6d\0\u0bae\0\u0bef\0\u0c30\0\u0c71"+
    "\0\u0cb2\0\u0cf3\0\u0d34\0\u0d75\0\u0db6\0\u0df7\0\u0e38\0\u0e79"+
    "\0\u0eba\0\u0efb\0\u0f3c\0\u0f7d\0\u0fbe\0\u0fff\0\u0104\0\u1040"+
    "\0\u1081\0\u10c2\0\u1103\0\u1144\0\u1185\0\u11c6\0\u1207\0\u0861"+
    "\0\u0861\0\u0861\0\u1248\0\u0861\0\u0861\0\u0861\0\u0861\0\u0861"+
    "\0\u0861\0\u0861\0\u0861\0\u0861\0\u0861\0\u0861\0\u0861\0\u1289"+
    "\0\u12ca\0\u0861\0\u130b\0\u134c\0\u0861\0\u138d\0\u13ce\0\u0861"+
    "\0\u140f\0\u0104\0\u1450\0\u1491\0\u14d2\0\u1513\0\u1554\0\u1595"+
    "\0\u15d6\0\u1617\0\u1658\0\u1699\0\u16da\0\u171b\0\u175c\0\u179d"+
    "\0\u17de\0\u181f\0\u1860\0\u18a1\0\u18e2\0\u1923\0\u1964\0\u0104"+
    "\0\u19a5\0\u19e6\0\u1a27\0\u1a68\0\u1aa9\0\u1aea\0\u0861\0\u0861"+
    "\0\u0861\0\u1b2b\0\u1b6c\0\u1bad\0\u1bee\0\u0104\0\u1c2f\0\u1c70"+
    "\0\u1cb1\0\u1cf2\0\u1d33\0\u0104\0\u0104\0\u1d74\0\u0104\0\u1db5"+
    "\0\u0104\0\u1df6\0\u1e37\0\u0104\0\u1e78\0\u1eb9\0\u1efa\0\u1f3b"+
    "\0\u1f7c\0\u1fbd\0\u1ffe\0\u203f\0\u0104\0\u2080\0\u20c1\0\u0104"+
    "\0\u2102\0\u0104\0\u2143\0\u2184\0\u21c5\0\u0104\0\u0104\0\u2206"+
    "\0\u2247\0\u2288\0\u22c9\0\u230a\0\u0104\0\u234b\0\u238c\0\u0104"+
    "\0\u23cd\0\u240e\0\u244f\0\u2490\0\u24d1\0\u0104\0\u2512\0\u2553"+
    "\0\u2594\0\u25d5\0\u2616\0\u0104\0\u2657\0\u0104\0\u2698\0\u26d9"+
    "\0\u0104\0\u0104\0\u0104\0\u0104\0\u0104\0\u271a\0\u0104\0\u275b"+
    "\0\u279c\0\u27dd\0\u281e\0\u0104\0\u285f\0\u0104\0\u28a0\0\u28e1"+
    "\0\u0104\0\u0104\0\u0104\0\u0104";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[228];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\4\3\5\1\6\1\7\1\5\1\10\1\5"+
    "\1\11\1\5\1\12\1\13\1\14\1\15\1\5\1\16"+
    "\1\5\1\17\1\20\2\5\1\21\1\22\2\5\1\23"+
    "\1\5\1\24\2\5\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\5\2\0\1\55"+
    "\1\57\1\60\1\55\46\61\1\62\26\61\1\63\3\61"+
    "\75\64\1\0\2\64\1\65\1\0\1\4\2\0\1\66"+
    "\3\0\4\67\2\0\1\66\22\0\1\70\27\0\1\4"+
    "\10\0\4\5\1\0\33\5\30\0\2\5\13\0\1\71"+
    "\34\0\1\72\1\73\36\0\4\5\1\0\2\5\1\74"+
    "\11\5\1\75\16\5\30\0\2\5\7\0\4\5\1\0"+
    "\10\5\1\76\3\5\1\77\16\5\30\0\2\5\7\0"+
    "\4\5\1\0\20\5\1\100\12\5\30\0\2\5\7\0"+
    "\4\5\1\0\7\5\1\101\23\5\30\0\2\5\7\0"+
    "\4\5\1\0\10\5\1\102\22\5\30\0\2\5\7\0"+
    "\4\5\1\0\2\5\1\103\15\5\1\104\3\5\1\105"+
    "\6\5\30\0\2\5\7\0\4\5\1\0\4\5\1\106"+
    "\26\5\30\0\2\5\7\0\4\5\1\0\30\5\1\107"+
    "\2\5\30\0\2\5\7\0\4\5\1\0\11\5\1\110"+
    "\2\5\1\111\2\5\1\112\13\5\30\0\2\5\7\0"+
    "\4\5\1\0\13\5\1\113\3\5\1\114\1\5\1\115"+
    "\5\5\1\116\3\5\30\0\2\5\7\0\4\5\1\0"+
    "\1\117\17\5\1\120\12\5\30\0\2\5\7\0\4\5"+
    "\1\0\10\5\1\121\3\5\1\122\16\5\30\0\2\5"+
    "\7\0\4\5\1\0\14\5\1\123\16\5\30\0\2\5"+
    "\7\0\4\5\1\0\17\5\1\124\13\5\30\0\2\5"+
    "\7\0\4\5\1\0\14\5\1\125\16\5\30\0\2\5"+
    "\7\0\1\70\37\0\1\126\27\0\1\70\51\0\1\127"+
    "\1\130\100\0\1\131\100\0\1\132\1\133\3\0\1\43"+
    "\10\0\1\51\62\0\1\134\1\0\1\135\76\0\1\136"+
    "\100\0\1\137\2\0\1\140\74\0\1\44\1\141\100\0"+
    "\1\142\5\0\1\143\72\0\1\144\100\0\1\145\7\0"+
    "\1\146\70\0\1\147\200\0\1\52\37\0\1\4\2\0"+
    "\1\66\3\0\4\67\2\0\1\66\13\0\1\150\6\0"+
    "\1\70\27\0\1\4\1\150\6\0\74\57\1\151\1\57"+
    "\1\152\2\57\27\0\1\153\51\0\46\61\1\0\26\61"+
    "\1\0\3\61\46\154\1\62\1\155\25\154\1\0\3\154"+
    "\75\64\1\0\2\64\101\0\1\65\1\0\1\156\3\0"+
    "\1\157\37\0\1\157\23\0\1\156\17\0\4\67\66\0"+
    "\1\70\2\0\1\66\1\0\4\160\4\0\1\66\52\0"+
    "\1\70\10\0\4\5\1\0\14\5\1\161\16\5\30\0"+
    "\2\5\7\0\4\5\1\0\7\5\1\162\23\5\30\0"+
    "\2\5\7\0\4\5\1\0\13\5\1\163\17\5\30\0"+
    "\2\5\7\0\4\5\1\0\20\5\1\164\12\5\30\0"+
    "\2\5\7\0\4\5\1\0\16\5\1\165\2\5\1\166"+
    "\11\5\30\0\2\5\7\0\4\5\1\0\10\5\1\167"+
    "\22\5\30\0\2\5\7\0\4\5\1\0\13\5\1\170"+
    "\11\5\1\171\5\5\30\0\2\5\7\0\4\5\1\0"+
    "\16\5\1\172\14\5\30\0\2\5\7\0\4\5\1\0"+
    "\4\5\1\173\26\5\30\0\2\5\7\0\4\5\1\0"+
    "\13\5\1\174\17\5\30\0\2\5\7\0\4\5\1\0"+
    "\13\5\1\175\17\5\30\0\2\5\7\0\4\5\1\0"+
    "\31\5\1\176\1\5\30\0\2\5\7\0\4\5\1\0"+
    "\16\5\1\177\14\5\30\0\2\5\7\0\4\5\1\0"+
    "\20\5\1\200\12\5\30\0\2\5\7\0\4\5\1\0"+
    "\11\5\1\201\21\5\30\0\2\5\7\0\4\5\1\0"+
    "\7\5\1\202\1\5\1\203\21\5\30\0\2\5\7\0"+
    "\4\5\1\0\14\5\1\204\16\5\30\0\2\5\7\0"+
    "\4\5\1\0\25\5\1\205\1\206\4\5\30\0\2\5"+
    "\7\0\4\5\1\0\21\5\1\207\11\5\30\0\2\5"+
    "\7\0\4\5\1\0\13\5\1\210\17\5\30\0\2\5"+
    "\7\0\4\5\1\0\1\211\32\5\30\0\2\5\7\0"+
    "\4\5\1\0\4\5\1\212\26\5\30\0\2\5\7\0"+
    "\4\5\1\0\13\5\1\213\17\5\30\0\2\5\7\0"+
    "\4\5\1\0\21\5\1\214\11\5\30\0\2\5\7\0"+
    "\4\5\1\0\2\5\1\215\16\5\1\216\11\5\30\0"+
    "\2\5\47\0\1\217\102\0\1\220\100\0\1\221\36\0"+
    "\1\222\1\0\2\222\1\0\2\222\4\0\1\222\1\0"+
    "\2\222\3\0\1\222\4\0\1\222\40\0\1\222\7\0"+
    "\75\57\1\0\3\57\26\0\1\223\52\0\46\154\2\0"+
    "\25\154\1\0\3\154\1\0\1\156\4\0\4\160\57\0"+
    "\1\156\10\0\1\156\67\0\1\156\10\0\4\5\1\0"+
    "\11\5\1\224\21\5\30\0\2\5\7\0\4\5\1\0"+
    "\7\5\1\225\23\5\30\0\2\5\7\0\4\5\1\0"+
    "\25\5\1\226\5\5\30\0\2\5\7\0\4\5\1\0"+
    "\21\5\1\227\11\5\30\0\2\5\7\0\4\5\1\0"+
    "\14\5\1\230\16\5\30\0\2\5\7\0\4\5\1\0"+
    "\11\5\1\231\21\5\30\0\2\5\7\0\4\5\1\0"+
    "\4\5\1\232\26\5\30\0\2\5\7\0\4\5\1\0"+
    "\21\5\1\233\11\5\30\0\2\5\7\0\4\5\1\0"+
    "\10\5\1\234\22\5\30\0\2\5\7\0\4\5\1\0"+
    "\23\5\1\235\7\5\30\0\2\5\7\0\4\5\1\0"+
    "\10\5\1\236\22\5\30\0\2\5\7\0\4\5\1\0"+
    "\14\5\1\237\16\5\30\0\2\5\7\0\4\5\1\0"+
    "\10\5\1\240\22\5\30\0\2\5\7\0\4\5\1\0"+
    "\10\5\1\241\22\5\30\0\2\5\7\0\4\5\1\0"+
    "\13\5\1\242\2\5\1\243\14\5\30\0\2\5\7\0"+
    "\4\5\1\0\7\5\1\244\23\5\30\0\2\5\7\0"+
    "\4\5\1\0\4\5\1\245\26\5\30\0\2\5\7\0"+
    "\4\5\1\0\13\5\1\246\17\5\30\0\2\5\7\0"+
    "\4\5\1\0\7\5\1\247\23\5\30\0\2\5\7\0"+
    "\4\5\1\0\20\5\1\250\12\5\30\0\2\5\7\0"+
    "\4\5\1\0\10\5\1\251\22\5\30\0\2\5\7\0"+
    "\4\5\1\0\13\5\1\252\17\5\30\0\2\5\7\0"+
    "\4\5\1\0\11\5\1\253\21\5\30\0\2\5\7\0"+
    "\4\5\1\0\6\5\1\254\24\5\30\0\2\5\7\0"+
    "\4\5\1\0\14\5\1\255\16\5\30\0\2\5\7\0"+
    "\4\5\1\0\2\5\1\256\30\5\30\0\2\5\7\0"+
    "\4\5\1\0\11\5\1\257\21\5\30\0\2\5\7\0"+
    "\4\5\1\0\22\5\1\260\10\5\30\0\2\5\7\0"+
    "\1\222\1\0\2\222\1\0\2\222\4\67\1\222\1\0"+
    "\2\222\3\0\1\222\4\0\1\222\40\0\1\222\32\0"+
    "\1\261\56\0\4\5\1\0\13\5\1\262\17\5\30\0"+
    "\2\5\7\0\4\5\1\0\11\5\1\263\21\5\30\0"+
    "\2\5\1\264\6\0\4\5\1\0\25\5\1\265\5\5"+
    "\30\0\2\5\7\0\4\5\1\0\20\5\1\266\12\5"+
    "\30\0\2\5\7\0\4\5\1\0\12\5\1\267\20\5"+
    "\30\0\2\5\7\0\4\5\1\0\7\5\1\270\23\5"+
    "\30\0\2\5\7\0\4\5\1\0\16\5\1\271\14\5"+
    "\30\0\2\5\7\0\4\5\1\0\7\5\1\272\23\5"+
    "\30\0\2\5\7\0\4\5\1\0\22\5\1\273\10\5"+
    "\30\0\2\5\7\0\4\5\1\0\21\5\1\274\11\5"+
    "\30\0\2\5\7\0\4\5\1\0\13\5\1\275\17\5"+
    "\30\0\2\5\7\0\4\5\1\0\15\5\1\276\15\5"+
    "\30\0\2\5\7\0\4\5\1\0\21\5\1\277\11\5"+
    "\30\0\2\5\7\0\4\5\1\0\13\5\1\300\17\5"+
    "\30\0\2\5\7\0\4\5\1\0\10\5\1\301\22\5"+
    "\30\0\2\5\7\0\4\5\1\0\14\5\1\302\16\5"+
    "\30\0\2\5\7\0\4\5\1\0\15\5\1\303\15\5"+
    "\30\0\2\5\7\0\4\5\1\0\4\5\1\304\26\5"+
    "\30\0\2\5\7\0\4\5\1\0\2\5\1\305\30\5"+
    "\30\0\2\5\7\0\4\5\1\0\10\5\1\306\22\5"+
    "\30\0\2\5\7\0\4\5\1\0\13\5\1\307\17\5"+
    "\30\0\2\5\16\0\1\310\71\0\4\5\1\0\33\5"+
    "\30\0\2\5\1\264\5\0\73\311\1\0\1\312\4\311"+
    "\1\0\4\5\1\0\20\5\1\313\12\5\30\0\2\5"+
    "\7\0\4\5\1\0\20\5\1\314\12\5\30\0\2\5"+
    "\7\0\4\5\1\0\13\5\1\315\17\5\30\0\2\5"+
    "\7\0\4\5\1\0\20\5\1\316\12\5\30\0\2\5"+
    "\7\0\4\5\1\0\10\5\1\317\22\5\30\0\2\5"+
    "\7\0\4\5\1\0\20\5\1\320\12\5\30\0\2\5"+
    "\7\0\4\5\1\0\13\5\1\321\17\5\30\0\2\5"+
    "\7\0\4\5\1\0\15\5\1\322\15\5\30\0\2\5"+
    "\7\0\4\5\1\0\22\5\1\323\10\5\30\0\2\5"+
    "\7\0\4\5\1\0\1\324\32\5\30\0\2\5\7\0"+
    "\4\5\1\0\17\5\1\325\13\5\30\0\2\5\7\0"+
    "\4\5\1\0\2\5\1\326\30\5\30\0\2\5\7\0"+
    "\4\5\1\0\10\5\1\327\22\5\30\0\2\5\7\0"+
    "\4\5\1\0\21\5\1\330\11\5\30\0\2\5\20\0"+
    "\1\331\66\0\73\311\1\160\1\312\101\311\1\0\3\311"+
    "\1\0\4\5\1\0\10\5\1\332\22\5\30\0\2\5"+
    "\7\0\4\5\1\0\10\5\1\333\22\5\30\0\2\5"+
    "\7\0\4\5\1\0\1\334\32\5\30\0\2\5\7\0"+
    "\4\5\1\0\4\5\1\335\26\5\30\0\2\5\7\0"+
    "\4\5\1\0\13\5\1\336\17\5\30\0\2\5\7\0"+
    "\4\5\1\0\2\5\1\337\30\5\30\0\2\5\36\0"+
    "\1\340\51\0\4\5\1\0\22\5\1\341\10\5\30\0"+
    "\2\5\7\0\4\5\1\0\7\5\1\342\23\5\30\0"+
    "\2\5\7\0\4\5\1\0\10\5\1\343\22\5\30\0"+
    "\2\5\7\0\4\5\1\0\10\5\1\344\22\5\30\0"+
    "\2\5\24\0\1\55\62\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10530];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\37\1\4\11\1\1\7\11\1\1\2\0\2\1"+
    "\1\11\2\1\1\0\2\1\3\11\32\1\1\0\1\1"+
    "\3\11\1\1\14\11\2\0\1\11\1\0\1\1\1\11"+
    "\1\1\1\0\1\11\36\1\3\11\1\1\1\0\35\1"+
    "\1\0\2\1\1\0\23\1\3\0\16\1\1\0\6\1"+
    "\1\0\4\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[228];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	   
	   private Symbol symbol(int type) {
		   return new Symbol(type, yyline, yycolumn);
   	   }
   	
 	   private Symbol symbol(int type, Object val) {
		   return new Symbol(type, yyline, yycolumn, val);
   	   }
   	   


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexicalAnalysisCalculator(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public LexicalAnalysisCalculator(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 156) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 31: 
          { return symbol(sym.SUB_ASSIGN, new String(yytext()));
          }
        case 86: break;
        case 79: 
          { return symbol(sym.DOUBLE, new String(yytext()));
          }
        case 87: break;
        case 44: 
          { return symbol(sym.MOD_ASSIGN, new String(yytext()));
          }
        case 88: break;
        case 40: 
          { return symbol(sym.INC_OP, new String(yytext()));
          }
        case 89: break;
        case 3: 
          { return symbol(sym.IDENTIFIER, new String(yytext()));
          }
        case 90: break;
        case 13: 
          { return symbol(sym.ECOMERCIAL, new String(yytext()));
          }
        case 91: break;
        case 22: 
          { return symbol(sym.ABREPARENTESES, new String(yytext()));
          }
        case 92: break;
        case 20: 
          { return symbol(sym.VIRGULA, new String(yytext()));
          }
        case 93: break;
        case 59: 
          { return symbol(sym.ELSE, new String(yytext()));
          }
        case 94: break;
        case 8: 
          { return symbol(sym.MENORQUE, new String(yytext()));
          }
        case 95: break;
        case 63: 
          { return symbol(sym.CHAR, new String(yytext()));
          }
        case 96: break;
        case 72: 
          { return symbol(sym.RETURN, new String(yytext()));
          }
        case 97: break;
        case 46: 
          { return symbol(sym.AND_OP, new String(yytext()));
          }
        case 98: break;
        case 11: 
          { return symbol(sym.BARRA, new String(yytext()));
          }
        case 99: break;
        case 60: 
          { return symbol(sym.ENUM, new String(yytext()));
          }
        case 100: break;
        case 42: 
          { return symbol(sym.DIV_ASSIGN, new String(yytext()));
          }
        case 101: break;
        case 26: 
          { return symbol(sym.TIO, new String(yytext()));
          }
        case 102: break;
        case 4: 
          { return symbol(sym.MENOS, new String(yytext()));
          }
        case 103: break;
        case 49: 
          { return symbol(sym.OR_OP, new String(yytext()));
          }
        case 104: break;
        case 66: 
          { return symbol(sym.FLOAT, new String(yytext()));
          }
        case 105: break;
        case 68: 
          { return symbol(sym.BREAK, new String(yytext()));
          }
        case 106: break;
        case 81: 
          { return symbol(sym.DEFAULT, new String(yytext()));
          }
        case 107: break;
        case 34: 
          { return symbol(sym.RIGHT_OP, new String(yytext()));
          }
        case 108: break;
        case 2: 
          { return symbol(sym.CONSTANT, new String(yytext()));
          }
        case 109: break;
        case 62: 
          { return symbol(sym.CASE, new String(yytext()));
          }
        case 110: break;
        case 61: 
          { return symbol(sym.AUTO, new String(yytext()));
          }
        case 111: break;
        case 65: 
          { return symbol(sym.VOID, new String(yytext()));
          }
        case 112: break;
        case 50: 
          { return symbol(sym.NE_OP, new String(yytext()));
          }
        case 113: break;
        case 80: 
          { return symbol(sym.TYPEDEF, new String(yytext()));
          }
        case 114: break;
        case 5: 
          { return symbol(sym.PONTO, new String(yytext()));
          }
        case 115: break;
        case 29: 
          { return symbol(sym.DEC_OP, new String(yytext()));
          }
        case 116: break;
        case 6: 
          { return symbol(sym.MAIORQUE, new String(yytext()));
          }
        case 117: break;
        case 73: 
          { return symbol(sym.EXTERN, new String(yytext()));
          }
        case 118: break;
        case 54: 
          { return symbol(sym.INT, new String(yytext()));
          }
        case 119: break;
        case 36: 
          { return symbol(sym.EQ_OP, new String(yytext()));
          }
        case 120: break;
        case 35: 
          { return symbol(sym.GE_OP, new String(yytext()));
          }
        case 121: break;
        case 27: 
          { return symbol(sym.INTERROGACAO, new String(yytext()));
          }
        case 122: break;
        case 76: 
          { return symbol(sym.SIGNED, new String(yytext()));
          }
        case 123: break;
        case 43: 
          { yybegin(comments);
          }
        case 124: break;
        case 23: 
          { return symbol(sym.FECHAPARENTESES, new String(yytext()));
          }
        case 125: break;
        case 51: 
          { return symbol(sym.STRING_LITERAL, new String(yytext()));
          }
        case 126: break;
        case 32: 
          { return symbol(sym.IF, new String(yytext()));
          }
        case 127: break;
        case 75: 
          { return symbol(sym.STATIC, new String(yytext()));
          }
        case 128: break;
        case 28: 
          { yyline++;
          }
        case 129: break;
        case 25: 
          { return symbol(sym.FECHACOCHETES, new String(yytext()));
          }
        case 130: break;
        case 83: 
          { return symbol(sym.REGISTER, new String(yytext()));
          }
        case 131: break;
        case 30: 
          { return symbol(sym.PTR_OP, new String(yytext()));
          }
        case 132: break;
        case 33: 
          { return symbol(sym.DO, new String(yytext()));
          }
        case 133: break;
        case 47: 
          { return symbol(sym.XOR_ASSIGN, new String(yytext()));
          }
        case 134: break;
        case 41: 
          { return symbol(sym.MUL_ASSIGN, new String(yytext()));
          }
        case 135: break;
        case 18: 
          { return symbol(sym.ABRECHAVES, new String(yytext()));
          }
        case 136: break;
        case 48: 
          { return symbol(sym.OR_ASSIGN, new String(yytext()));
          }
        case 137: break;
        case 70: 
          { return symbol(sym.SHORT, new String(yytext()));
          }
        case 138: break;
        case 58: 
          { return symbol(sym.LONG, new String(yytext()));
          }
        case 139: break;
        case 52: 
          { yybegin(0);
          }
        case 140: break;
        case 57: 
          { return symbol(sym.LEFT_ASSIGN, new String(yytext()));
          }
        case 141: break;
        case 24: 
          { return symbol(sym.ABRECOCHETES, new String(yytext()));
          }
        case 142: break;
        case 78: 
          { return symbol(sym.SWITCH, new String(yytext()));
          }
        case 143: break;
        case 39: 
          { return symbol(sym.ADD_ASSIGN, new String(yytext()));
          }
        case 144: break;
        case 21: 
          { return symbol(sym.DOISPONTOS, new String(yytext()));
          }
        case 145: break;
        case 16: 
          { return symbol(sym.EXCLAMACAO, new String(yytext()));
          }
        case 146: break;
        case 56: 
          { return symbol(sym.RIGHT_ASSIGN, new String(yytext()));
          }
        case 147: break;
        case 19: 
          { return symbol(sym.FECHACHAVES, new String(yytext()));
          }
        case 148: break;
        case 85: 
          { return symbol(sym.VOLATILE, new String(yytext()));
          }
        case 149: break;
        case 74: 
          { return symbol(sym.STRUCT, new String(yytext()));
          }
        case 150: break;
        case 45: 
          { return symbol(sym.AND_ASSIGN, new String(yytext()));
          }
        case 151: break;
        case 67: 
          { return symbol(sym.UNION, new String(yytext()));
          }
        case 152: break;
        case 69: 
          { return symbol(sym.CONST, new String(yytext()));
          }
        case 153: break;
        case 14: 
          { return symbol(sym.CIRCUNFLEXO, new String(yytext()));
          }
        case 154: break;
        case 55: 
          { return symbol(sym.ELLIPSIS, new String(yytext()));
          }
        case 155: break;
        case 10: 
          { return symbol(sym.ASTERISCO, new String(yytext()));
          }
        case 156: break;
        case 17: 
          { return symbol(sym.PONTOEVIRGULA, new String(yytext()));
          }
        case 157: break;
        case 82: 
          { return symbol(sym.UNSIGNED, new String(yytext()));
          }
        case 158: break;
        case 9: 
          { return symbol(sym.MAIS, new String(yytext()));
          }
        case 159: break;
        case 12: 
          { return symbol(sym.PORCENTO, new String(yytext()));
          }
        case 160: break;
        case 77: 
          { return symbol(sym.SIZEOF, new String(yytext()));
          }
        case 161: break;
        case 37: 
          { return symbol(sym.LE_OP, new String(yytext()));
          }
        case 162: break;
        case 53: 
          { return symbol(sym.FOR, new String(yytext()));
          }
        case 163: break;
        case 38: 
          { return symbol(sym.LEFT_OP, new String(yytext()));
          }
        case 164: break;
        case 71: 
          { return symbol(sym.WHILE, new String(yytext()));
          }
        case 165: break;
        case 84: 
          { return symbol(sym.CONTINUE, new String(yytext()));
          }
        case 166: break;
        case 7: 
          { return symbol(sym.IGUAL, new String(yytext()));
          }
        case 167: break;
        case 64: 
          { return symbol(sym.GOTO, new String(yytext()));
          }
        case 168: break;
        case 15: 
          { return symbol(sym.PIPELINE, new String(yytext()));
          }
        case 169: break;
        case 1: 
          { 
          }
        case 170: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
