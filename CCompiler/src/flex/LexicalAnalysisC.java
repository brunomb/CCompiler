/* The following code was generated by JFlex 1.4.3 on 8/13/13 2:45 PM */

package flex;

import java_cup.runtime.*;
import cup.sym;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 8/13/13 2:45 PM from the specification file
 * <tt>C:/Users/Matheus/git/CCompiler/CCompiler/src/flex/C.flex</tt>
 */
public class LexicalAnalysisC implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENTS = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\57\1\77"+
    "\2\0\1\53\1\54\1\75\1\65\1\66\1\20\1\52\1\63\1\10"+
    "\1\46\1\17\1\73\11\4\1\64\1\60\1\51\1\50\1\47\1\72"+
    "\1\0\4\6\1\7\1\12\5\5\1\14\10\5\1\16\2\5\1\74"+
    "\2\5\1\67\1\76\1\70\1\55\1\5\1\0\1\24\1\21\1\30"+
    "\1\35\1\23\1\11\1\40\1\32\1\34\1\5\1\25\1\13\1\36"+
    "\1\33\1\27\1\44\1\5\1\22\1\31\1\26\1\15\1\45\1\42"+
    "\1\37\1\43\1\41\1\61\1\56\1\62\1\71\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\2\1\1\2\1\3\1\4\4\3\1\5\1\6"+
    "\14\3\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\2\1\0"+
    "\1\34\1\35\1\34\1\0\2\2\1\36\1\37\1\40"+
    "\5\3\1\41\1\42\1\43\1\44\16\3\1\45\2\3"+
    "\1\46\3\3\1\0\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\64\2\0\1\65\1\34\1\66\1\2\1\0\1\2"+
    "\1\3\1\67\25\3\1\70\6\3\1\71\1\72\1\73"+
    "\1\2\1\3\1\74\6\3\1\75\1\76\1\3\1\77"+
    "\1\3\1\100\2\3\1\101\10\3\1\102\2\3\1\103"+
    "\1\104\1\3\1\0\1\3\1\105\1\106\5\3\1\107"+
    "\2\3\1\110\5\3\1\111\1\3\2\0\1\3\1\112"+
    "\1\3\1\113\2\3\1\114\1\115\1\116\1\117\1\120"+
    "\1\3\1\121\3\3\1\122\1\3\1\123\1\3\1\124"+
    "\1\125\1\126\1\127";

  private static int [] zzUnpackAction() {
    int [] result = new int[221];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\100\0\200\0\300\0\u0100\0\u0140\0\u0180\0\u01c0"+
    "\0\u0200\0\u0240\0\u0280\0\u02c0\0\u0300\0\u0340\0\u0380\0\u03c0"+
    "\0\u0400\0\u0440\0\u0480\0\u04c0\0\u0500\0\u0540\0\u0580\0\u05c0"+
    "\0\u0600\0\u0640\0\u0680\0\u06c0\0\u0700\0\u0740\0\u0780\0\u07c0"+
    "\0\u0800\0\u0840\0\u0880\0\300\0\300\0\300\0\300\0\u08c0"+
    "\0\300\0\300\0\300\0\300\0\300\0\300\0\u0900\0\u0940"+
    "\0\u0980\0\300\0\u09c0\0\u0a00\0\u0a40\0\u0a80\0\300\0\300"+
    "\0\300\0\u0ac0\0\u0b00\0\u0b40\0\u0b80\0\u0bc0\0\u0c00\0\300"+
    "\0\300\0\300\0\u0c40\0\u0c80\0\u0cc0\0\u0d00\0\u0d40\0\u0d80"+
    "\0\u0dc0\0\u0e00\0\u0e40\0\u0e80\0\u0ec0\0\u0f00\0\u0f40\0\u0f80"+
    "\0\u0140\0\u0fc0\0\u1000\0\u1040\0\u1080\0\u10c0\0\u1100\0\u1140"+
    "\0\u1180\0\300\0\300\0\300\0\u11c0\0\300\0\300\0\300"+
    "\0\300\0\300\0\300\0\300\0\300\0\300\0\u1200\0\u1240"+
    "\0\300\0\u1280\0\300\0\u12c0\0\u1300\0\300\0\u1340\0\u0140"+
    "\0\u1380\0\u13c0\0\u1400\0\u1440\0\u1480\0\u14c0\0\u1500\0\u1540"+
    "\0\u1580\0\u15c0\0\u1600\0\u1640\0\u1680\0\u16c0\0\u1700\0\u1740"+
    "\0\u1780\0\u17c0\0\u1800\0\u1840\0\u1880\0\u0140\0\u18c0\0\u1900"+
    "\0\u1940\0\u1980\0\u19c0\0\u1a00\0\300\0\300\0\300\0\u1a40"+
    "\0\u1a80\0\u0140\0\u1ac0\0\u1b00\0\u1b40\0\u1b80\0\u1bc0\0\u1c00"+
    "\0\u0140\0\u0140\0\u1c40\0\u0140\0\u1c80\0\u0140\0\u1cc0\0\u1d00"+
    "\0\u0140\0\u1d40\0\u1d80\0\u1dc0\0\u1e00\0\u1e40\0\u1e80\0\u1ec0"+
    "\0\u1f00\0\u0140\0\u1f40\0\u1f80\0\u0140\0\u0140\0\u1fc0\0\u2000"+
    "\0\u2040\0\u0140\0\u0140\0\u2080\0\u20c0\0\u2100\0\u2140\0\u2180"+
    "\0\u0140\0\u21c0\0\u2200\0\u0140\0\u2240\0\u2280\0\u22c0\0\u2300"+
    "\0\u2340\0\u0140\0\u2380\0\u23c0\0\u2400\0\u2440\0\u0140\0\u2480"+
    "\0\u0140\0\u24c0\0\u2500\0\u0140\0\u0140\0\u0140\0\u0140\0\u0140"+
    "\0\u2540\0\u0140\0\u2580\0\u25c0\0\u2600\0\u0140\0\u2640\0\u0140"+
    "\0\u2680\0\u0140\0\u0140\0\u0140\0\u0140";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[221];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\3\2\4\1\5\3\6\1\7\1\10\1\6"+
    "\1\11\1\12\1\13\1\6\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\6\1\22\1\6\1\23\1\24\2\6"+
    "\1\25\1\26\2\6\1\27\1\6\1\30\2\6\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\6\2\0"+
    "\1\60\2\61\1\62\15\61\1\63\57\61\2\0\1\4"+
    "\201\0\1\5\2\0\1\64\3\0\4\65\4\0\1\64"+
    "\22\0\1\66\24\0\1\5\10\0\4\6\1\0\6\6"+
    "\2\0\25\6\25\0\2\6\13\0\1\67\36\0\1\70"+
    "\1\71\33\0\4\6\1\0\2\6\1\72\3\6\2\0"+
    "\6\6\1\73\16\6\25\0\2\6\7\0\4\6\1\0"+
    "\6\6\2\0\6\6\1\74\16\6\25\0\2\6\7\0"+
    "\4\6\1\0\6\6\2\0\2\6\1\75\22\6\25\0"+
    "\2\6\7\0\4\6\1\0\6\6\2\0\12\6\1\76"+
    "\12\6\25\0\2\6\22\0\1\77\1\100\27\0\1\101"+
    "\77\0\1\102\33\0\4\6\1\0\6\6\2\0\1\6"+
    "\1\103\23\6\25\0\2\6\7\0\4\6\1\0\6\6"+
    "\2\0\2\6\1\104\22\6\25\0\2\6\7\0\4\6"+
    "\1\0\2\6\1\105\3\6\2\0\12\6\1\106\3\6"+
    "\1\107\6\6\25\0\2\6\7\0\4\6\1\0\4\6"+
    "\1\110\1\6\2\0\25\6\25\0\2\6\7\0\4\6"+
    "\1\0\6\6\2\0\22\6\1\111\2\6\25\0\2\6"+
    "\7\0\4\6\1\0\6\6\2\0\3\6\1\112\2\6"+
    "\1\113\2\6\1\114\13\6\25\0\2\6\7\0\4\6"+
    "\1\0\6\6\2\0\5\6\1\115\3\6\1\116\1\6"+
    "\1\117\5\6\1\120\3\6\25\0\2\6\7\0\4\6"+
    "\1\0\1\121\5\6\2\0\12\6\1\122\12\6\25\0"+
    "\2\6\7\0\4\6\1\0\6\6\2\0\2\6\1\123"+
    "\3\6\1\124\16\6\25\0\2\6\7\0\4\6\1\0"+
    "\6\6\2\0\6\6\1\125\16\6\25\0\2\6\7\0"+
    "\4\6\1\0\6\6\2\0\11\6\1\126\13\6\25\0"+
    "\2\6\7\0\4\6\1\0\6\6\2\0\6\6\1\127"+
    "\16\6\25\0\2\6\7\0\1\66\41\0\1\130\24\0"+
    "\1\66\53\0\1\131\1\132\77\0\1\133\77\0\1\134"+
    "\1\135\1\0\1\45\10\0\1\53\63\0\1\136\1\0"+
    "\1\137\74\0\1\46\1\140\77\0\1\141\3\0\1\142"+
    "\73\0\1\143\77\0\1\144\5\0\1\145\71\0\1\146"+
    "\76\0\1\54\34\0\1\5\2\0\1\64\3\0\4\65"+
    "\4\0\1\64\13\0\1\147\6\0\1\66\24\0\1\5"+
    "\1\147\3\0\76\60\1\150\1\151\2\61\1\0\15\61"+
    "\1\0\57\61\2\152\1\0\14\152\1\153\1\63\57\152"+
    "\4\0\1\154\3\0\1\155\41\0\1\155\20\0\1\154"+
    "\17\0\4\65\65\0\1\66\2\0\1\64\1\0\4\156"+
    "\6\0\1\64\47\0\1\66\10\0\4\6\1\0\6\6"+
    "\2\0\6\6\1\157\16\6\25\0\2\6\7\0\4\6"+
    "\1\0\6\6\2\0\1\6\1\160\23\6\25\0\2\6"+
    "\7\0\4\6\1\0\6\6\2\0\12\6\1\161\12\6"+
    "\25\0\2\6\7\0\4\6\1\0\6\6\2\0\5\6"+
    "\1\162\17\6\25\0\2\6\7\0\4\6\1\0\6\6"+
    "\2\0\10\6\1\163\2\6\1\164\11\6\25\0\2\6"+
    "\3\0\2\77\1\0\75\77\4\0\4\6\1\0\6\6"+
    "\2\0\2\6\1\165\22\6\25\0\2\6\7\0\4\6"+
    "\1\0\6\6\2\0\5\6\1\166\11\6\1\167\5\6"+
    "\25\0\2\6\7\0\4\6\1\0\6\6\2\0\10\6"+
    "\1\170\14\6\25\0\2\6\7\0\4\6\1\0\4\6"+
    "\1\171\1\6\2\0\25\6\25\0\2\6\7\0\4\6"+
    "\1\0\6\6\2\0\5\6\1\172\17\6\25\0\2\6"+
    "\7\0\4\6\1\0\6\6\2\0\5\6\1\173\17\6"+
    "\25\0\2\6\7\0\4\6\1\0\6\6\2\0\23\6"+
    "\1\174\1\6\25\0\2\6\7\0\4\6\1\0\6\6"+
    "\2\0\10\6\1\175\14\6\25\0\2\6\7\0\4\6"+
    "\1\0\6\6\2\0\12\6\1\176\12\6\25\0\2\6"+
    "\7\0\4\6\1\0\6\6\2\0\3\6\1\177\21\6"+
    "\25\0\2\6\7\0\4\6\1\0\6\6\2\0\1\6"+
    "\1\200\1\6\1\201\21\6\25\0\2\6\7\0\4\6"+
    "\1\0\6\6\2\0\6\6\1\202\16\6\25\0\2\6"+
    "\7\0\4\6\1\0\6\6\2\0\17\6\1\203\1\204"+
    "\4\6\25\0\2\6\7\0\4\6\1\0\6\6\2\0"+
    "\13\6\1\205\11\6\25\0\2\6\7\0\4\6\1\0"+
    "\6\6\2\0\5\6\1\206\17\6\25\0\2\6\7\0"+
    "\4\6\1\0\1\207\5\6\2\0\25\6\25\0\2\6"+
    "\7\0\4\6\1\0\4\6\1\210\1\6\2\0\25\6"+
    "\25\0\2\6\7\0\4\6\1\0\6\6\2\0\5\6"+
    "\1\211\17\6\25\0\2\6\7\0\4\6\1\0\6\6"+
    "\2\0\13\6\1\212\11\6\25\0\2\6\7\0\4\6"+
    "\1\0\2\6\1\213\3\6\2\0\13\6\1\214\11\6"+
    "\25\0\2\6\51\0\1\215\101\0\1\216\77\0\1\217"+
    "\33\0\1\220\1\0\2\220\1\0\2\220\6\0\1\220"+
    "\1\0\2\220\3\0\1\220\4\0\1\220\35\0\1\220"+
    "\4\0\2\60\1\0\75\60\2\152\1\0\14\152\2\0"+
    "\57\152\4\0\1\154\4\0\4\156\56\0\1\154\10\0"+
    "\1\154\66\0\1\154\10\0\4\6\1\0\6\6\2\0"+
    "\3\6\1\221\21\6\25\0\2\6\7\0\4\6\1\0"+
    "\6\6\2\0\17\6\1\222\5\6\25\0\2\6\7\0"+
    "\4\6\1\0\6\6\2\0\1\6\1\223\23\6\25\0"+
    "\2\6\7\0\4\6\1\0\6\6\2\0\13\6\1\224"+
    "\11\6\25\0\2\6\7\0\4\6\1\0\6\6\2\0"+
    "\6\6\1\225\16\6\25\0\2\6\7\0\4\6\1\0"+
    "\6\6\2\0\3\6\1\226\21\6\25\0\2\6\7\0"+
    "\4\6\1\0\4\6\1\227\1\6\2\0\25\6\25\0"+
    "\2\6\7\0\4\6\1\0\6\6\2\0\13\6\1\230"+
    "\11\6\25\0\2\6\7\0\4\6\1\0\6\6\2\0"+
    "\2\6\1\231\22\6\25\0\2\6\7\0\4\6\1\0"+
    "\6\6\2\0\15\6\1\232\7\6\25\0\2\6\7\0"+
    "\4\6\1\0\6\6\2\0\2\6\1\233\22\6\25\0"+
    "\2\6\7\0\4\6\1\0\6\6\2\0\6\6\1\234"+
    "\16\6\25\0\2\6\7\0\4\6\1\0\6\6\2\0"+
    "\2\6\1\235\22\6\25\0\2\6\7\0\4\6\1\0"+
    "\6\6\2\0\2\6\1\236\22\6\25\0\2\6\7\0"+
    "\4\6\1\0\6\6\2\0\5\6\1\237\2\6\1\240"+
    "\14\6\25\0\2\6\7\0\4\6\1\0\6\6\2\0"+
    "\1\6\1\241\23\6\25\0\2\6\7\0\4\6\1\0"+
    "\4\6\1\242\1\6\2\0\25\6\25\0\2\6\7\0"+
    "\4\6\1\0\6\6\2\0\5\6\1\243\17\6\25\0"+
    "\2\6\7\0\4\6\1\0\6\6\2\0\1\6\1\244"+
    "\23\6\25\0\2\6\7\0\4\6\1\0\6\6\2\0"+
    "\12\6\1\245\12\6\25\0\2\6\7\0\4\6\1\0"+
    "\6\6\2\0\2\6\1\246\22\6\25\0\2\6\7\0"+
    "\4\6\1\0\6\6\2\0\5\6\1\247\17\6\25\0"+
    "\2\6\7\0\4\6\1\0\6\6\2\0\3\6\1\250"+
    "\21\6\25\0\2\6\7\0\4\6\1\0\6\6\2\0"+
    "\1\251\24\6\25\0\2\6\7\0\4\6\1\0\6\6"+
    "\2\0\6\6\1\252\16\6\25\0\2\6\7\0\4\6"+
    "\1\0\2\6\1\253\3\6\2\0\25\6\25\0\2\6"+
    "\7\0\4\6\1\0\6\6\2\0\3\6\1\254\21\6"+
    "\25\0\2\6\7\0\4\6\1\0\6\6\2\0\14\6"+
    "\1\255\10\6\25\0\2\6\7\0\1\220\1\0\2\220"+
    "\1\0\2\220\4\65\2\0\1\220\1\0\2\220\3\0"+
    "\1\220\4\0\1\220\35\0\1\220\10\0\4\6\1\0"+
    "\6\6\2\0\5\6\1\256\17\6\25\0\2\6\7\0"+
    "\4\6\1\0\6\6\2\0\3\6\1\257\21\6\25\0"+
    "\2\6\1\260\6\0\4\6\1\0\6\6\2\0\17\6"+
    "\1\261\5\6\25\0\2\6\7\0\4\6\1\0\6\6"+
    "\2\0\12\6\1\262\12\6\25\0\2\6\7\0\4\6"+
    "\1\0\6\6\2\0\4\6\1\263\20\6\25\0\2\6"+
    "\7\0\4\6\1\0\6\6\2\0\1\6\1\264\23\6"+
    "\25\0\2\6\7\0\4\6\1\0\6\6\2\0\10\6"+
    "\1\265\14\6\25\0\2\6\7\0\4\6\1\0\6\6"+
    "\2\0\1\6\1\266\23\6\25\0\2\6\7\0\4\6"+
    "\1\0\6\6\2\0\14\6\1\267\10\6\25\0\2\6"+
    "\7\0\4\6\1\0\6\6\2\0\13\6\1\270\11\6"+
    "\25\0\2\6\7\0\4\6\1\0\6\6\2\0\5\6"+
    "\1\271\17\6\25\0\2\6\7\0\4\6\1\0\6\6"+
    "\2\0\7\6\1\272\15\6\25\0\2\6\7\0\4\6"+
    "\1\0\6\6\2\0\13\6\1\273\11\6\25\0\2\6"+
    "\7\0\4\6\1\0\6\6\2\0\5\6\1\274\17\6"+
    "\25\0\2\6\7\0\4\6\1\0\6\6\2\0\2\6"+
    "\1\275\22\6\25\0\2\6\7\0\4\6\1\0\6\6"+
    "\2\0\6\6\1\276\16\6\25\0\2\6\7\0\4\6"+
    "\1\0\6\6\2\0\7\6\1\277\15\6\25\0\2\6"+
    "\7\0\4\6\1\0\4\6\1\300\1\6\2\0\25\6"+
    "\25\0\2\6\7\0\4\6\1\0\2\6\1\301\3\6"+
    "\2\0\25\6\25\0\2\6\7\0\4\6\1\0\6\6"+
    "\2\0\2\6\1\302\22\6\25\0\2\6\7\0\4\6"+
    "\1\0\6\6\2\0\5\6\1\303\17\6\25\0\2\6"+
    "\7\0\4\6\1\0\6\6\2\0\25\6\25\0\2\6"+
    "\1\260\2\0\75\304\1\0\1\305\1\304\4\0\4\6"+
    "\1\0\6\6\2\0\12\6\1\306\12\6\25\0\2\6"+
    "\7\0\4\6\1\0\6\6\2\0\12\6\1\307\12\6"+
    "\25\0\2\6\7\0\4\6\1\0\6\6\2\0\5\6"+
    "\1\310\17\6\25\0\2\6\7\0\4\6\1\0\6\6"+
    "\2\0\12\6\1\311\12\6\25\0\2\6\7\0\4\6"+
    "\1\0\6\6\2\0\2\6\1\312\22\6\25\0\2\6"+
    "\7\0\4\6\1\0\6\6\2\0\12\6\1\313\12\6"+
    "\25\0\2\6\7\0\4\6\1\0\6\6\2\0\5\6"+
    "\1\314\17\6\25\0\2\6\7\0\4\6\1\0\6\6"+
    "\2\0\7\6\1\315\15\6\25\0\2\6\7\0\4\6"+
    "\1\0\6\6\2\0\14\6\1\316\10\6\25\0\2\6"+
    "\7\0\4\6\1\0\1\317\5\6\2\0\25\6\25\0"+
    "\2\6\7\0\4\6\1\0\6\6\2\0\11\6\1\320"+
    "\13\6\25\0\2\6\7\0\4\6\1\0\2\6\1\321"+
    "\3\6\2\0\25\6\25\0\2\6\7\0\4\6\1\0"+
    "\6\6\2\0\2\6\1\322\22\6\25\0\2\6\7\0"+
    "\4\6\1\0\6\6\2\0\13\6\1\323\11\6\25\0"+
    "\2\6\3\0\75\304\1\156\1\305\3\304\1\0\75\304"+
    "\4\0\4\6\1\0\6\6\2\0\2\6\1\324\22\6"+
    "\25\0\2\6\7\0\4\6\1\0\6\6\2\0\2\6"+
    "\1\325\22\6\25\0\2\6\7\0\4\6\1\0\1\326"+
    "\5\6\2\0\25\6\25\0\2\6\7\0\4\6\1\0"+
    "\4\6\1\327\1\6\2\0\25\6\25\0\2\6\7\0"+
    "\4\6\1\0\6\6\2\0\5\6\1\330\17\6\25\0"+
    "\2\6\7\0\4\6\1\0\2\6\1\331\3\6\2\0"+
    "\25\6\25\0\2\6\7\0\4\6\1\0\6\6\2\0"+
    "\14\6\1\332\10\6\25\0\2\6\7\0\4\6\1\0"+
    "\6\6\2\0\1\6\1\333\23\6\25\0\2\6\7\0"+
    "\4\6\1\0\6\6\2\0\2\6\1\334\22\6\25\0"+
    "\2\6\7\0\4\6\1\0\6\6\2\0\2\6\1\335"+
    "\22\6\25\0\2\6\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9920];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\1\1\11\37\1\4\11\1\1\6\11\1\1"+
    "\1\0\1\1\1\11\1\1\1\0\2\1\3\11\6\1"+
    "\3\11\25\1\1\0\1\1\3\11\1\1\11\11\2\0"+
    "\1\11\1\1\1\11\1\1\1\0\1\11\36\1\3\11"+
    "\40\1\1\0\23\1\2\0\30\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[221];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
       
       private Symbol symbol(int type) {
           return new Symbol(type, yyline, yycolumn);
          }
       
        private Symbol symbol(int type, Object val) {
           return new Symbol(type, yyline, yycolumn, val);
          }
          


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexicalAnalysisC(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public LexicalAnalysisC(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 156) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 32: 
          { return symbol(sym.SUB_ASSIGN, new String(yytext()));
          }
        case 88: break;
        case 81: 
          { return symbol(sym.DOUBLE, new String(yytext()));
          }
        case 89: break;
        case 46: 
          { return symbol(sym.MOD_ASSIGN, new String(yytext()));
          }
        case 90: break;
        case 45: 
          { return symbol(sym.INC_OP, new String(yytext()));
          }
        case 91: break;
        case 3: 
          { return symbol(sym.IDENTIFIER, new String(yytext()));
          }
        case 92: break;
        case 13: 
          { return symbol(sym.ECOMERCIAL, new String(yytext()));
          }
        case 93: break;
        case 22: 
          { return symbol(sym.ABREPARENTESES, new String(yytext()));
          }
        case 94: break;
        case 20: 
          { return symbol(sym.VIRGULA, new String(yytext()));
          }
        case 95: break;
        case 61: 
          { return symbol(sym.ELSE, new String(yytext()));
          }
        case 96: break;
        case 10: 
          { return symbol(sym.MENORQUE, new String(yytext()));
          }
        case 97: break;
        case 65: 
          { return symbol(sym.CHAR, new String(yytext()));
          }
        case 98: break;
        case 74: 
          { return symbol(sym.RETURN, new String(yytext()));
          }
        case 99: break;
        case 48: 
          { return symbol(sym.AND_OP, new String(yytext()));
          }
        case 100: break;
        case 33: 
          { /* consume //-comment */
          }
        case 101: break;
        case 5: 
          { return symbol(sym.BARRA, new String(yytext()));
          }
        case 102: break;
        case 62: 
          { return symbol(sym.ENUM, new String(yytext()));
          }
        case 103: break;
        case 35: 
          { return symbol(sym.DIV_ASSIGN, new String(yytext()));
          }
        case 104: break;
        case 26: 
          { return symbol(sym.TIO, new String(yytext()));
          }
        case 105: break;
        case 4: 
          { return symbol(sym.MENOS, new String(yytext()));
          }
        case 106: break;
        case 51: 
          { return symbol(sym.OR_OP, new String(yytext()));
          }
        case 107: break;
        case 68: 
          { return symbol(sym.FLOAT, new String(yytext()));
          }
        case 108: break;
        case 70: 
          { return symbol(sym.BREAK, new String(yytext()));
          }
        case 109: break;
        case 83: 
          { return symbol(sym.DEFAULT, new String(yytext()));
          }
        case 110: break;
        case 39: 
          { return symbol(sym.RIGHT_OP, new String(yytext()));
          }
        case 111: break;
        case 2: 
          { return symbol(sym.CONSTANT, new String(yytext()));
          }
        case 112: break;
        case 64: 
          { return symbol(sym.CASE, new String(yytext()));
          }
        case 113: break;
        case 63: 
          { return symbol(sym.AUTO, new String(yytext()));
          }
        case 114: break;
        case 67: 
          { return symbol(sym.VOID, new String(yytext()));
          }
        case 115: break;
        case 52: 
          { return symbol(sym.NE_OP, new String(yytext()));
          }
        case 116: break;
        case 82: 
          { return symbol(sym.TYPEDEF, new String(yytext()));
          }
        case 117: break;
        case 7: 
          { return symbol(sym.PONTO, new String(yytext()));
          }
        case 118: break;
        case 30: 
          { return symbol(sym.DEC_OP, new String(yytext()));
          }
        case 119: break;
        case 8: 
          { return symbol(sym.MAIORQUE, new String(yytext()));
          }
        case 120: break;
        case 75: 
          { return symbol(sym.EXTERN, new String(yytext()));
          }
        case 121: break;
        case 56: 
          { return symbol(sym.INT, new String(yytext()));
          }
        case 122: break;
        case 41: 
          { return symbol(sym.EQ_OP, new String(yytext()));
          }
        case 123: break;
        case 40: 
          { return symbol(sym.GE_OP, new String(yytext()));
          }
        case 124: break;
        case 27: 
          { return symbol(sym.INTERROGACAO, new String(yytext()));
          }
        case 125: break;
        case 78: 
          { return symbol(sym.SIGNED, new String(yytext()));
          }
        case 126: break;
        case 23: 
          { return symbol(sym.FECHAPARENTESES, new String(yytext()));
          }
        case 127: break;
        case 53: 
          { return symbol(sym.STRING_LITERAL, new String(yytext()));
          }
        case 128: break;
        case 37: 
          { return symbol(sym.IF, new String(yytext()));
          }
        case 129: break;
        case 77: 
          { return symbol(sym.STATIC, new String(yytext()));
          }
        case 130: break;
        case 29: 
          { yyline++;
          }
        case 131: break;
        case 25: 
          { return symbol(sym.FECHACOCHETES, new String(yytext()));
          }
        case 132: break;
        case 85: 
          { return symbol(sym.REGISTER, new String(yytext()));
          }
        case 133: break;
        case 31: 
          { return symbol(sym.PTR_OP, new String(yytext()));
          }
        case 134: break;
        case 38: 
          { return symbol(sym.DO, new String(yytext()));
          }
        case 135: break;
        case 49: 
          { return symbol(sym.XOR_ASSIGN, new String(yytext()));
          }
        case 136: break;
        case 36: 
          { return symbol(sym.MUL_ASSIGN, new String(yytext()));
          }
        case 137: break;
        case 34: 
          { yybegin(COMMENTS);
          }
        case 138: break;
        case 18: 
          { return symbol(sym.ABRECHAVES, new String(yytext()));
          }
        case 139: break;
        case 72: 
          { return symbol(sym.SHORT, new String(yytext()));
          }
        case 140: break;
        case 50: 
          { return symbol(sym.OR_ASSIGN, new String(yytext()));
          }
        case 141: break;
        case 60: 
          { return symbol(sym.LONG, new String(yytext()));
          }
        case 142: break;
        case 54: 
          { yybegin(0);
          }
        case 143: break;
        case 59: 
          { return symbol(sym.LEFT_ASSIGN, new String(yytext()));
          }
        case 144: break;
        case 24: 
          { return symbol(sym.ABRECOCHETES, new String(yytext()));
          }
        case 145: break;
        case 80: 
          { return symbol(sym.SWITCH, new String(yytext()));
          }
        case 146: break;
        case 44: 
          { return symbol(sym.ADD_ASSIGN, new String(yytext()));
          }
        case 147: break;
        case 21: 
          { return symbol(sym.DOISPONTOS, new String(yytext()));
          }
        case 148: break;
        case 16: 
          { return symbol(sym.EXCLAMACAO, new String(yytext()));
          }
        case 149: break;
        case 58: 
          { return symbol(sym.RIGHT_ASSIGN, new String(yytext()));
          }
        case 150: break;
        case 19: 
          { return symbol(sym.FECHACHAVES, new String(yytext()));
          }
        case 151: break;
        case 87: 
          { return symbol(sym.VOLATILE, new String(yytext()));
          }
        case 152: break;
        case 76: 
          { return symbol(sym.STRUCT, new String(yytext()));
          }
        case 153: break;
        case 47: 
          { return symbol(sym.AND_ASSIGN, new String(yytext()));
          }
        case 154: break;
        case 69: 
          { return symbol(sym.UNION, new String(yytext()));
          }
        case 155: break;
        case 71: 
          { return symbol(sym.CONST, new String(yytext()));
          }
        case 156: break;
        case 14: 
          { return symbol(sym.CIRCUNFLEXO, new String(yytext()));
          }
        case 157: break;
        case 57: 
          { return symbol(sym.ELLIPSIS, new String(yytext()));
          }
        case 158: break;
        case 6: 
          { return symbol(sym.ASTERISCO, new String(yytext()));
          }
        case 159: break;
        case 17: 
          { return symbol(sym.PONTOEVIRGULA, new String(yytext()));
          }
        case 160: break;
        case 84: 
          { return symbol(sym.UNSIGNED, new String(yytext()));
          }
        case 161: break;
        case 11: 
          { return symbol(sym.MAIS, new String(yytext()));
          }
        case 162: break;
        case 12: 
          { return symbol(sym.PORCENTO, new String(yytext()));
          }
        case 163: break;
        case 79: 
          { return symbol(sym.SIZEOF, new String(yytext()));
          }
        case 164: break;
        case 1: 
          { /* ignore */
          }
        case 165: break;
        case 42: 
          { return symbol(sym.LE_OP, new String(yytext()));
          }
        case 166: break;
        case 55: 
          { return symbol(sym.FOR, new String(yytext()));
          }
        case 167: break;
        case 43: 
          { return symbol(sym.LEFT_OP, new String(yytext()));
          }
        case 168: break;
        case 73: 
          { return symbol(sym.WHILE, new String(yytext()));
          }
        case 169: break;
        case 86: 
          { return symbol(sym.CONTINUE, new String(yytext()));
          }
        case 170: break;
        case 9: 
          { return symbol(sym.IGUAL, new String(yytext()));
          }
        case 171: break;
        case 66: 
          { return symbol(sym.GOTO, new String(yytext()));
          }
        case 172: break;
        case 15: 
          { return symbol(sym.PIPELINE, new String(yytext()));
          }
        case 173: break;
        case 28: 
          { 
          }
        case 174: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {
                return symbol(sym.EOF);
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  private String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = sym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java LexicalAnalysisC <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        LexicalAnalysisC scanner = null;
        try {
          scanner = new LexicalAnalysisC( new java.io.FileReader(argv[i]) );
          while ( !scanner.zzAtEOF ) scanner.debug_next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
